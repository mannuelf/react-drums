{"version":3,"sources":["data/drums.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["drums","id","name","sounds","src","keyCode","keyChar","getDrumKitByName","kitName","find","kit","Button","styled","button","App","props","getAppData","state","handleClick","e","console","log","key","charCode","pad","document","querySelector","audio","currentTime","play","classList","add","handleKeyDown","removeActiveClass","propertyName","target","remove","bind","this","setState","addEventListener","querySelectorAll","forEach","allSounds","Object","entries","map","index","className","sound","item","onClick","onKeyDown","data-key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSAMaA,EAAgB,CAC3B,CACEC,GAAI,EACJC,KAAM,MACNC,OAAQ,CACN,CACEF,GAAI,EACJC,KAAM,cACNE,IAAK,gEACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,EACJC,KAAM,eACNE,IAAK,gEACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,EACJC,KAAM,WACNE,IAAK,uDACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,EACJC,KAAM,UACNE,IAAK,uDACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,EACJC,KAAM,eACNE,IAAK,0DACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,EACJC,KAAM,gBACNE,IAAK,0DACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,EACJC,KAAM,iBACNE,IAAK,0DACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,EACJC,KAAM,gBACNE,IAAK,0DACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,EACJC,KAAM,kBACNE,IAAK,6DACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,GACJC,KAAM,mBACNE,IAAK,6DACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,GACJC,KAAM,gBACNE,IAAK,2DACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,GACJC,KAAM,iBACNE,IAAK,2DACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,GACJC,KAAM,SACNE,IAAK,oDACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,GACJC,KAAM,UACNE,IAAK,oDACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,GACJC,KAAM,UACNE,IAAK,sDACLC,QAAS,GACTC,QAAS,KAEX,CACEL,GAAI,GACJC,KAAM,WACNE,IAAK,sDACLC,QAAS,GACTC,QAAS,QAUV,SAASC,EAAiBC,GAC/B,OAAOR,EAAMS,MAAK,SAAAC,GAAG,OAAIA,EAAIR,OAASM,K,6QChIxC,IAAMG,EAASC,IAAOC,OAAV,KAoIGC,E,kDAnHb,WAAYC,GAAkB,IAAD,8BAC3B,cAAMA,IAoBRC,WAAa,WACX,MAAO,CAAEN,IAAK,EAAKO,QAtBQ,EAyB7BC,YAAc,SAACC,GACbC,QAAQC,IAAI,QAASF,GACrB,IAAMG,EAAMH,EAAEd,SAAWc,EAAEI,SAErBC,EAAMC,SAASC,cAAT,2BACUJ,EADV,OAGNK,EAAQF,SAASC,cAAT,0BACOJ,EADP,OAITK,IAELA,EAAMC,YAAc,EACpBD,EAAME,OACNL,EAAIM,UAAUC,IAAI,aAxCS,EA2C7BC,cAAgB,SAACb,GACf,IAAMG,EAAMH,EAAEd,SAAWc,EAAEI,SACrBC,EAAMC,SAASC,cAAT,2BACUJ,EADV,OAGNK,EAAQF,SAASC,cAAT,0BACOJ,EADP,OAITK,IAELA,EAAMC,YAAc,EACpBD,EAAME,OACNL,EAAIM,UAAUC,IAAI,aAxDS,EA2D7BE,kBAAoB,SAACd,GACI,cAAnBA,EAAEe,cAGSf,EAAEgB,OACVL,UAAUM,OAAO,YA9DxB,EAAKnB,MAAQ,CACXP,IAAK,IAEP,EAAKsB,cAAgB,EAAKA,cAAcK,KAAnB,gBACrB,EAAKnB,YAAc,EAAKA,YAAYmB,KAAjB,gBANQ,E,gEASR,IAAD,OAElBC,KAAKC,SAAS,CAAE7B,IAAKH,EADL,SAEhBkB,SAASe,iBAAiB,UAAWF,KAAKN,eAC1CP,SAASe,iBAAiB,QAASF,KAAKpB,aACxCO,SAASe,iBAAiB,gBAAiBF,KAAKL,mBAChCR,SAASgB,iBAAT,eACRC,SAAQ,SAAC7B,GACfA,EAAO2B,iBAAiB,gBAAiB,EAAKP,wB,+BAkDxC,IAAD,OACCvB,EAAQ4B,KAAKtB,aAAbN,IACFiC,EAAsBC,OAAOC,QAAQnC,GAAKoC,KAC9C,WAAoBC,GAApB,wCAAmC,UAErC,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,2CACA,yCAEF,6BAASA,UAAU,aACfL,EAEEA,EAAUG,KAAI,SAACG,EAAYF,GACzB,OAAQE,EAEJA,EAAMH,KAAI,SAACI,GACT,OACE,oCACE,kBAACvC,EAAD,CACEwC,QAAS,SAAAhC,GAAC,OAAI,EAAKD,YAAYC,IAC/BiC,UAAW,SAAAjC,GAAC,OAAI,EAAKa,cAAcb,IACnCG,IAAK4B,EAAKjD,GACVoD,WAAUH,EAAK7C,QACf2C,UAAU,cAEV,0BAAMA,UAAU,iBAAiBE,EAAKjD,IACtC,0BAAM+C,UAAU,mBACbE,EAAK5C,SAER,0BAAM0C,UAAU,mBAAmBE,EAAKhD,MACxC,2BACEoB,IAAK4B,EAAK7C,QACVD,IAAK8C,EAAK9C,IACViD,WAAUH,EAAK7C,eAnBzB,MAHN,mB,GAjFIiD,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.0c37e44c.chunk.js","sourcesContent":["export interface Drum {\n  id: number;\n  name: string;\n  sounds: object[];\n}\n\nexport const drums: Drum[] = [\n  {\n    id: 1,\n    name: \"808\",\n    sounds: [\n      {\n        id: 1,\n        name: \"Bass drum I\",\n        src: \"https://themwebs.me/drums/808/bass-drum/E808_BD[short]-01.wav\",\n        keyCode: 86,\n        keyChar: \"V\"\n      },\n      {\n        id: 2,\n        name: \"Bass drum II\",\n        src: \"https://themwebs.me/drums/808/bass-drum/E808_BD[short]-02.wav\",\n        keyCode: 66,\n        keyChar: \"B\"\n      },\n      {\n        id: 3,\n        name: \"Cow bell\",\n        src: \"https://themwebs.me/drums/808/cowbell/E808_CB-01.wav\",\n        keyCode: 78,\n        keyChar: \"N\"\n      },\n      {\n        id: 4,\n        name: \"Rimshot\",\n        src: \"https://themwebs.me/drums/808/rimshot/E808_RS-01.wav\",\n        keyCode: 77,\n        keyChar: \"M\"\n      },\n      {\n        id: 5,\n        name: \"Snare drum I\",\n        src: \"https://themwebs.me/drums/808/snare-drum/E808_SD-01.wav\",\n        keyCode: 70,\n        keyChar: \"F\"\n      },\n      {\n        id: 6,\n        name: \"Snare drum II\",\n        src: \"https://themwebs.me/drums/808/snare-drum/E808_SD-02.wav\",\n        keyCode: 71,\n        keyChar: \"G\"\n      },\n      {\n        id: 7,\n        name: \"Snare drum III\",\n        src: \"https://themwebs.me/drums/808/snare-drum/E808_SD-03.wav\",\n        keyCode: 72,\n        keyChar: \"H\"\n      },\n      {\n        id: 8,\n        name: \"Snare drum IV\",\n        src: \"https://themwebs.me/drums/808/snare-drum/E808_SD-04.wav\",\n        keyCode: 74,\n        keyChar: \"J\"\n      },\n      {\n        id: 9,\n        name: \"Closed hi hat I\",\n        src: \"https://themwebs.me/drums/808/closed-hi-hat/E808_CH-01.wav\",\n        keyCode: 82,\n        keyChar: \"R\"\n      },\n      {\n        id: 10,\n        name: \"Closed hi hat II\",\n        src: \"https://themwebs.me/drums/808/closed-hi-hat/E808_CH-02.wav\",\n        keyCode: 84,\n        keyChar: \"T\"\n      },\n      {\n        id: 11,\n        name: \"Open hi hat I\",\n        src: \"https://themwebs.me/drums/808/open-hi-hat/E808_OH-01.wav\",\n        keyCode: 89,\n        keyChar: \"Y\"\n      },\n      {\n        id: 12,\n        name: \"Open hi hat II\",\n        src: \"https://themwebs.me/drums/808/open-hi-hat/E808_OH-02.wav\",\n        keyCode: 85,\n        keyChar: \"U\"\n      },\n      {\n        id: 13,\n        name: \"Clap I\",\n        src: \"https://themwebs.me/drums/808/clap/E808_CP-01.wav\",\n        keyCode: 52,\n        keyChar: \"4\"\n      },\n      {\n        id: 14,\n        name: \"Clap II\",\n        src: \"https://themwebs.me/drums/808/clap/E808_CP-02.wav\",\n        keyCode: 53,\n        keyChar: \"5\"\n      },\n      {\n        id: 15,\n        name: \"Clave I\",\n        src: \"https://themwebs.me/drums/808/claves/E808_CL-01.wav\",\n        keyCode: 54,\n        keyChar: \"6\"\n      },\n      {\n        id: 16,\n        name: \"Clave II\",\n        src: \"https://themwebs.me/drums/808/claves/E808_CL-02.wav\",\n        keyCode: 55,\n        keyChar: \"7\"\n      }\n    ]\n  }\n];\n\nexport function getDrums() {\n  return drums;\n}\n\nexport function getDrumKitByName(kitName: string) {\n  return drums.find(kit => kit.name === kitName);\n}\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { getDrumKitByName } from \"./data/drums\";\n\nconst Button = styled.button`\n  background: #444;\n  border-radius: 3px;\n  color: yellow;\n  padding: 1rem;\n  border: none;\n  height: auto;\n  width: 100%;\n  cursor: pointer;\n  box-shadow: -2px 2px 2px rgba(0, 0, 0, 0.4);\n`;\n\ninterface AppProps {\n  kit: object[];\n}\n\nclass App extends Component {\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      kit: []\n    };\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    const kitName = \"808\"; // hard coded for now, will be filter/drop down interface.\n    this.setState({ kit: getDrumKitByName(kitName) }); // yeah hooks next iteration\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n    document.addEventListener(\"click\", this.handleClick);\n    document.addEventListener(\"transitionend\", this.removeActiveClass);\n    const buttons = document.querySelectorAll(`.pad-button`);\n    buttons.forEach((button: any) => {\n      button.addEventListener(\"transitionend\", this.removeActiveClass);\n    });\n  }\n\n  getAppData = () => {\n    return { kit: this.state };\n  };\n\n  handleClick = (e: any) => {\n    console.log(\"click\", e);\n    const key = e.keyCode || e.charCode;\n\n    const pad = document.querySelector(\n      `button[data-key=\"${key}\"]`\n    ) as HTMLButtonElement;\n    const audio = document.querySelector(\n      `audio[data-key=\"${key}\"]`\n    ) as HTMLAudioElement;\n\n    if (!audio) return;\n\n    audio.currentTime = 0;\n    audio.play();\n    pad.classList.add(\"playing\");\n  };\n\n  handleKeyDown = (e: any) => {\n    const key = e.keyCode || e.charCode;\n    const pad = document.querySelector(\n      `button[data-key=\"${key}\"]`\n    ) as HTMLButtonElement;\n    const audio = document.querySelector(\n      `audio[data-key=\"${key}\"]`\n    ) as HTMLAudioElement;\n\n    if (!audio) return;\n\n    audio.currentTime = 0;\n    audio.play();\n    pad.classList.add(\"playing\");\n  };\n\n  removeActiveClass = (e: any) => {\n    if (e.propertyName !== \"transform\") {\n      return;\n    }\n    const button = e.target;\n    button.classList.remove(\"playing\");\n  };\n\n  render() {\n    const { kit } = this.getAppData();\n    const allSounds: object[] = Object.entries(kit).map(\n      ([key, value]: any, index) => value[\"sounds\"]\n    );\n    return (\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <h1>React Drums</h1>\n          <h2>808 Drum</h2>\n        </header>\n        <section className=\"app-panel\">\n          {!allSounds\n            ? \"Loading...\"\n            : allSounds.map((sound: any, index) => {\n                return !sound\n                  ? \"\"\n                  : sound.map((item: any) => {\n                      return (\n                        <>\n                          <Button\n                            onClick={e => this.handleClick(e)}\n                            onKeyDown={e => this.handleKeyDown(e)}\n                            key={item.id}\n                            data-key={item.keyCode}\n                            className=\"pad-button\"\n                          >\n                            <span className=\"pad-button-id\">{item.id}</span>\n                            <span className=\"pad-button-char\">\n                              {item.keyChar}\n                            </span>\n                            <span className=\"pad-button-name\">{item.name}</span>\n                            <audio\n                              key={item.keyCode}\n                              src={item.src}\n                              data-key={item.keyCode}\n                            />\n                          </Button>\n                        </>\n                      );\n                    });\n              })}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./css/normalize.css\";\nimport \"./css/styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}